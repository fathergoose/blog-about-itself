#!/usr/bin/env node

import markdownit from "markdown-it";
import { readFile, readdir, writeFile } from "node:fs/promises";
import { Buffer } from "node:buffer";

const TEMPLATE = "./src/templates/articles.template.html";

async function combineHtml(parentFile, childContent) {
  const parentContent = await readFile(parentFile, "utf8");
  const result = parentContent.replace("{{___article_text___}}", childContent);
  return result;
}

function pathToTitle(path) {
  const baseNameNoExt = path.split("/").slice(-1)[0].split(".")[0];
  return baseNameNoExt
    .toLowerCase()
    .split("_")
    .map((word) => `${word.charAt(0).toUpperCase()}${word.slice(1)}`)
    .join(" ");
}

function createLinkElements(pagePaths) {
  return pagePaths.map(
    (path) =>
      `<div class="artile-links"><a href="${path}">${pathToTitle(path)}</a></div>`,
  );
}

async function buildArticles(template) {
  const basePath = "./src/articles/public/";
  const files = await readdir(basePath, {
    recursive: true,
  });

  const mdFilePaths = files
    .filter((path) => path.slice(-3) === ".md")
    .map((fileName) => `${basePath}${fileName}`);

  const htmlPaths = mdFilePaths.map((path) =>
    path.replace(/src\/articles\/public\/(.*)\.md/, "www/articles/$1.html"),
  );
  htmlPaths.forEach(async (htmlPath, i) => {
    const mdFilePath = mdFilePaths[i];
    console.log(`Building ${mdFilePath} to ${htmlPath}`);
    const data = await readFile(mdFilePaths[i], { encoding: "utf8" });
    const md = markdownit();
    const child = md.render(data);
    const resultHtml = await combineHtml(template, child);
    const htmlData = new Uint8Array(Buffer.from(resultHtml));
    await writeFile(htmlPath, htmlData);
  });
  return htmlPaths;
}

async function buildIndex(template, linkPaths) {
  const linkElements = createLinkElements(linkPaths);
  const innerHTML = `<div class="link-list">\n${linkElements.join("\n")}\n</div>`;
  const indexPage = await combineHtml(template, innerHTML);
  const htmlData = new Uint8Array(Buffer.from(indexPage));
  await writeFile("www/index.html", htmlData);
}

try {
  const htmlFilePaths = await buildArticles(TEMPLATE);
  // Remove the leading "./www"
  const webRootPaths = htmlFilePaths.map((filePath) => filePath.slice(5));
  const linkCount = webRootPaths.length;
  console.log(
    `Building index.html for ${linkCount} page${linkCount === 1 ? "" : "s"}`,
  );
  await buildIndex(TEMPLATE, webRootPaths);
} catch (err) {
  console.error(err);
}
