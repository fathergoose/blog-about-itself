#!/usr/bin/env node

import markdownit from "markdown-it";
import { readFile, readdir, writeFile } from "node:fs/promises";
import { join } from "node:path";
import { Buffer } from "node:buffer";

async function combineHtml(parentFile, childContent) {
  const parentContent = await readFile(parentFile, "utf8");
  const result = parentContent.replace("{{___article_text___}}", childContent);
  return result;
}

function pathToTitle(path) {
  const baseNameNoExt = path.split("/").slice(-1)[0].split(".")[0];
  return baseNameNoExt
    .toLowerCase()
    .split("_")
    .map((word) => `${word.charAt(0).toUpperCase()}${word.slice(1)}`)
    .join(" ");
}

function createAnchorElements(pagePaths) {
  return pagePaths.map(
    (path) =>
      `<div class="artile-links"><a href="${path}">${pathToTitle(path)}</a></div>`,
  );
}

async function buildArticles(template) {
  const basePath = "./src/articles/public/";
  const files = await readdir(basePath, {
    recursive: true,
  });

  const mdFilePaths = files
    .filter((path) => path.slice(-3) === ".md")
    .map((fileName) => `${basePath}${fileName}`);

  mdFilePaths.forEach(async (file) => {
    const outFile = file.replace(
      /src\/articles\/public\/(.*)\.md/,
      "www/articles/$1.html",
    );
    console.log(`Building ${file} to ${outFile}`);
    const data = await readFile(file, { encoding: "utf8" });
    const md = markdownit();
    const child = md.render(data);
    const resultHtml = await combineHtml(template, child);
    const htmlData = new Uint8Array(Buffer.from(resultHtml));
    await writeFile(outFile, htmlData);
  });
}

async function buildIndex(template) {
  const wwwContents = await readdir("./www/articles");

  const pages = wwwContents.filter(
    (path) => path.slice(-5) === ".html" && path !== "404.html",
  );

  const outfile = "www/index.html";
  console.log(`Building article index at ${outfile}`);
  console.log("pages: ", pages);
  const paths = pages.map((page) => join("/articles/", page));
  console.log("paths: ", paths);
  const links = createAnchorElements(paths);
  console.log("Links: ", links);
  const innerHTML = `<div class="link-list">\n${links.join("\n")}\n</div>`;
  const indexPage = await combineHtml(template, innerHTML);
  const htmlData = new Uint8Array(Buffer.from(indexPage));
  await writeFile(outfile, htmlData);
}

try {
  const TEMPLATE = "./src/templates/articles.template.html";
  await buildArticles(TEMPLATE);
  await buildIndex(TEMPLATE);
} catch (err) {
  console.error(err);
}
